var y=((e)=>typeof require!=="undefined"?require:typeof Proxy!=="undefined"?new Proxy(e,{get:(t,o)=>(typeof require!=="undefined"?require:t)[o]}):e)(function(e){if(typeof require!=="undefined")return require.apply(this,arguments);throw Error('Dynamic require of "'+e+'" is not supported')});import{Chain as c,WalletOption as E,setRequestClientConfig as P} from"@swapkit/helpers";import{decodeAddress as A,encodeAddress as f} from"@polkadot/util-crypto";import{Chain as n,ChainToHexChainId as g,SwapKitError as w,WalletOption as p,addEVMWalletNetwork as T,prepareNetworkSwitch as _} from"@swapkit/helpers";import{BrowserProvider as b} from"@swapkit/toolbox-evm";var x=(e,t)=>{const o=A(e);return f(o,t)},C=async({ethereumWindowProvider:e,chain:t,covalentApiKey:o,ethplorerApiKey:r})=>{if(!e)throw new w({errorKey:"wallet_provider_not_found",info:{wallet:p.TALISMAN,chain:t}});if(t!==n.Ethereum&&!o||t===n.Ethereum&&!r)throw new w({errorKey:"wallet_missing_api_key",info:{missingKey:t===n.Ethereum?"ethplorerApiKey":"covalentApiKey",chain:t}});const a=new b(e,"any"),d={provider:a,signer:await a.getSigner(),ethplorerApiKey:r,covalentApiKey:o},{getToolboxByChain:l}=await import("@swapkit/toolbox-evm"),s=l(t)(d);try{t!==n.Ethereum&&await T(a,s.getNetworkParams())}catch(i){throw new w({errorKey:"wallet_failed_to_add_or_switch_network",info:{wallet:p.TALISMAN,chain:t}})}return _({toolbox:{...s},chainId:g[t],provider:a})},u=async({chain:e,ethplorerApiKey:t,covalentApiKey:o})=>{switch(e){case n.Ethereum:case n.Arbitrum:case n.Optimism:case n.Polygon:case n.BinanceSmartChain:{if(!(window.talismanEth&&("send"in window.talismanEth)))throw new w({errorKey:"wallet_talisman_not_found",info:{chain:e}});const{getProvider:r}=await import("@swapkit/toolbox-evm"),a=await C({chain:e,ethplorerApiKey:t,covalentApiKey:o,ethereumWindowProvider:window.talismanEth}),d=(await window.talismanEth.send("eth_requestAccounts",[]))[0];return{walletMethods:{...a,getBalance:async(s,i=!0)=>a.getBalance(s||d,i,r(e))},address:d}}case n.Polkadot:{const{getToolboxByChain:r}=await import("@swapkit/toolbox-substrate"),l=await window?.injectedWeb3?.talisman?.enable?.("talisman");if(!l)throw new w({errorKey:"wallet_talisman_not_enabled",info:{chain:e}});const s=await r(e,{signer:l.signer}),i=await l.accounts.get();if(!i[0]?.address)throw new w({errorKey:"wallet_missing_params",info:{wallet:p.TALISMAN,accounts:i,address:i[0]?.address}});const m=i[0].address,h=x(m,0);return{walletMethods:{...s},address:h}}default:throw new w({errorKey:"wallet_chain_not_supported",info:{chain:e,wallet:p.TALISMAN}})}};var W=function({addChain:e,config:{thorswapApiKey:t,covalentApiKey:o,ethplorerApiKey:r}}){return async function a(d){P({apiKey:t});const l=d.map(async(s)=>{const{address:i,walletMethods:m}=await u({chain:s,covalentApiKey:o,ethplorerApiKey:r});e({address:i,...m,chain:s,balance:[],walletType:E.TALISMAN})});return await Promise.all(l),!0}},j=[c.Ethereum,c.Arbitrum,c.Avalanche,c.Polygon,c.BinanceSmartChain,c.Optimism,c.Polkadot],k={connectTalisman:W};export{k as talismanWallet};

//# debugId=6AAEFA905A80B93764756E2164756E21
