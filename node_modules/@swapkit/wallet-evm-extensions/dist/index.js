var y=((t)=>typeof require!=="undefined"?require:typeof Proxy!=="undefined"?new Proxy(t,{get:(e,r)=>(typeof require!=="undefined"?require:e)[r]}):t)(function(t){if(typeof require!=="undefined")return require.apply(this,arguments);throw Error('Dynamic require of "'+t+'" is not supported')});import{Chain as d,ChainToHexChainId as P,SwapKitError as v,WalletOption as n,addEVMWalletNetwork as S,prepareNetworkSwitch as T,setRequestClientConfig as b} from"@swapkit/helpers";import{getToolboxByChain as f} from"@swapkit/toolbox-evm";var C=function({addChain:t,config:{covalentApiKey:e,ethplorerApiKey:r,thorswapApiKey:l}}){return async function i(E,o=n.METAMASK,w){b({apiKey:l});const M=E.map(async(a)=>{const{BrowserProvider:W,getProvider:p}=await import("@swapkit/toolbox-evm");if(o===n.EIP6963){if(!w)throw new Error("Missing provider");const s=new W(w,"any");await s.send("eth_requestAccounts",[]);const m=await(await s.getSigner()).getAddress(),A=await h({chain:a,ethplorerApiKey:r,covalentApiKey:e,ethereumWindowProvider:w,provider:s});t({...A,chain:a,address:m,getBalance:async(O=!0)=>A.getBalance(m,O,p(a)),balance:[],walletType:o});return}const c=new W(B(o),"any");await c.send("eth_requestAccounts",[]);const u=await(await c.getSigner()).getAddress(),g=await h({chain:a,ethplorerApiKey:r,covalentApiKey:e,ethereumWindowProvider:B(o),provider:c});t({...g,chain:a,address:u,getBalance:async(s=!0)=>g.getBalance(u,s,p(a)),balance:[],walletType:o})});return await Promise.all(M),!0}},B=(t)=>{switch(t){case n.BRAVE:case n.METAMASK:case n.OKX_MOBILE:return window.ethereum;case n.COINBASE_WEB:return window.coinbaseWalletExtension;case n.TRUSTWALLET_WEB:return window.trustwallet}},h=async({ethereumWindowProvider:t,chain:e,covalentApiKey:r,ethplorerApiKey:l,provider:i})=>{if(!t)throw new Error("Requested web3 wallet is not installed");if(e!==d.Ethereum&&!r||e===d.Ethereum&&!l)throw new v({errorKey:"wallet_missing_api_key",info:{missingKey:e===d.Ethereum?"ethplorerApiKey":"covalentApiKey",chain:e}});const E={provider:i,signer:await i.getSigner(),ethplorerApiKey:l,covalentApiKey:r},o=f(e)(E);try{e!==d.Ethereum&&await S(i,o.getNetworkParams())}catch(w){throw new Error(`Failed to add/switch ${e} network: ${e}`)}return T({toolbox:{...o},chainId:P[e],provider:i})},R={connectEVMWallet:C};export{h as getWeb3WalletMethods,R as evmWallet};

//# debugId=31F58E44594B235B64756E2164756E21
