import{AbstractSigner as So,BrowserProvider as ao,HDNodeWallet as Fo,JsonRpcProvider as Eo,Signature as _o,Transaction as Po} from"ethers";import{ChainIdToChain as Hn,RequestClient as Cn,formatBigIntToSafeValue as Gn} from"@swapkit/helpers";var c=({apiKey:n,chainId:t})=>({getBalance:async(y)=>{const{data:o}=await Cn.get(`https://api.covalenthq.com/v1/${t}/address/${y}/balances_v2/`,{searchParams:{key:n}});return(o?.items||[]).map(({balance:p,contract_decimals:u,contract_ticker_symbol:T,contract_address:e,native_token:l})=>({value:Gn({value:BigInt(p),decimal:u,bigIntDecimal:u}),decimal:u,chain:Hn[t],symbol:`${T}${l?"":`-${e}`}`}))}});import{Chain as zn,RequestClient as xn,formatBigIntToSafeValue as Ln} from"@swapkit/helpers";var Wn="https://api.ethplorer.io",d=(n="freekey")=>({getBalance:async(t)=>{const{tokens:y=[]}=await xn.get(`${Wn}/getAddressInfo/${t}`,{searchParams:{apiKey:n}});return y.filter(({tokenInfo:{symbol:o},rawBalance:p})=>o&&p!=="0").map(({tokenInfo:{symbol:o,decimals:p,address:u},rawBalance:T})=>({chain:zn.Ethereum,symbol:u?`${o}-${u}`:o,value:Ln({value:BigInt(T),decimal:Number.parseInt(p),bigIntDecimal:Number.parseInt(p)}),decimal:Number.parseInt(p)}))}});import{AssetValue as C,BaseDecimal as nn,FeeOption as tn,SwapKitNumber as _,filterAssets as In,formatBigIntToSafeValue as Qn,isGasAsset as Yn} from"@swapkit/helpers";var It=async({toolbox:n,from:t,memo:y="",feeOptionKey:o=tn.Fastest,assetValue:p,abi:u,funcName:T,funcParams:e,contractAddress:l,txOverrides:i})=>{const m=(await n.getBalance(t)).find(({symbol:h,chain:H})=>p?h===p.symbol:h===C.from({chain:H})?.symbol),B=(await n.estimateGasPrices())[o];if(!m)return C.from({chain:p.chain});if(p&&(m.chain!==p.chain||m.symbol!==p?.symbol))return m;const w=u&&T&&e&&l?await n.estimateCall({contractAddress:l,abi:u,funcName:T,funcParams:e,txOverrides:i}):await n.estimateGasLimit({from:t,recipient:t,memo:y,assetValue:p}),f="maxFeePerGas"in B;if(!(("gasPrice"in B)||f))throw new Error("Could not fetch fee data");const q=w*(f?(B.maxFeePerGas||1n)+(B.maxPriorityFeePerGas||1n):B.gasPrice),g=_.fromBigInt(m.getBaseValue("bigint")).sub(q.toString());return C.from({chain:m.chain,value:g.getValue("string")})},Y=(n)=>n>0n?`0x${n.toString(16)}`:"0x0",J=async({provider:n,api:t,address:y,chain:o,potentialScamFilter:p})=>{const u=await t.getBalance(y),T=await n.getBalance(y),e=[{chain:o,symbol:C.from({chain:o}).symbol,value:Qn({value:BigInt(T),decimal:18,bigIntDecimal:18}),decimal:nn[o]},...u.filter((i)=>!Yn(i))];return(p?In(e):e).map(({symbol:i,value:m,decimal:B})=>new C({decimal:B||nn[o],value:m,identifier:`${o}.${i}`}))},$=async(n,t=tn.Fast,y,o,p=!0)=>{const u=(await W(o,p))[t],T=await o.estimateGas(n),e=C.from({chain:y});if(!p&&u.gasPrice)return e.set(_.fromBigInt(u.gasPrice*T,e.decimal));if(u.maxFeePerGas&&u.maxPriorityFeePerGas)return e.set(_.fromBigInt((u.maxFeePerGas+u.maxPriorityFeePerGas)*T,e.decimal));throw new Error("No gas price found")};import{ChainToRPC as Zn} from"@swapkit/helpers";import{JsonRpcProvider as Xn} from"ethers/providers";var Xt=(n,t)=>{return new Xn(t||Zn[n])};import{Chain as D,ContractAddress as G,FeeOption as U,SwapKitError as R,SwapKitNumber as on,erc20ABI as z,isGasAsset as P} from"@swapkit/helpers";import{BrowserProvider as kn,Contract as Sn,Interface as an,hexlify as j,toUtf8Bytes as N} from"ethers";import{getAddress as Z} from"ethers/address";import{MaxInt256 as Fn} from"ethers/constants";var vn=function(n){if(!n)throw new R("toolbox_evm_no_signer");return n.signMessage},K=Fn,En={[D.Arbitrum]:G.ARB,[D.Ethereum]:G.ETH,[D.Avalanche]:G.AVAX,[D.BinanceSmartChain]:G.BSC,[D.Polygon]:G.MATIC,[D.Optimism]:G.OP},_n=["payable","nonpayable"],Pn=(n)=>n.type===2||!!n.maxFeePerGas||!!n.maxPriorityFeePerGas,X=(n)=>n instanceof kn,k=(n,t,y)=>{return new Sn(n,an.from(t),y)},yn=(n)=>{try{return Z(n),!0}catch(t){return!1}},jn=(n,t)=>{const y=n.find((o)=>o.name===t);if(!y)throw new R("toolbox_evm_no_abi_fragment",{functionName:t});return y.stateMutability&&_n.includes(y.stateMutability)},S=async(n,t,{callProvider:y,signer:o,contractAddress:p,abi:u,funcName:T,funcParams:e=[],txOverrides:l,feeOption:i=U.Fast})=>{const m=y||n;if(!p)throw new Error("contractAddress must be provided");const B=jn(u,T);if(B&&X(m)&&o){const M=await I(m,{contractAddress:p,abi:u,funcName:T,funcParams:e,txOverrides:l});return a(m,M)}const w=k(p,u,m);if(B){if(!o)throw new R("toolbox_evm_no_signer");const M=l?.from||await o.getAddress();if(!M)throw new R("toolbox_evm_no_signer_address");const q=w.connect(o),{maxFeePerGas:g,maxPriorityFeePerGas:h,gasPrice:H}=(await W(n,t))[i],L=await w.getFunction(T).estimateGas(...e,l),Q=await q[T](...e,{...l,gasLimit:L,maxFeePerGas:g,maxPriorityFeePerGas:h,gasPrice:H,nonce:l?.nonce||await m.getTransactionCount(M)});return typeof Q?.hash==="string"?Q?.hash:Q}const f=await w[T]?.(...e);return typeof f?.hash==="string"?f?.hash:f},I=async(n,{contractAddress:t,abi:y,funcName:o,funcParams:p=[],txOverrides:u})=>k(t,y,n).getFunction(o).populateTransaction(...p.concat(u).filter((T)=>typeof T!=="undefined")),pn=async(n,{assetAddress:t,spenderAddress:y,from:o})=>await S(n,!0,{contractAddress:t,abi:z,funcName:"allowance",funcParams:[o,y]}),Nn=async(n,{assetAddress:t,spenderAddress:y,from:o,amount:p=K})=>{return on.fromBigInt(await pn(n,{assetAddress:t,spenderAddress:y,from:o})).gte(on.fromBigInt(BigInt(p)))},Kn=async(n,{assetAddress:t,spenderAddress:y,feeOptionKey:o=U.Fast,amount:p,gasLimitFallback:u,from:T,nonce:e},l,i=!0)=>{const m=[y,BigInt(p||K)],w={contractAddress:t,abi:z,funcName:"approve",funcParams:m,signer:l,txOverrides:{from:T}};if(X(n))return a(n,await I(n,w));return S(n,i,{...w,funcParams:m,txOverrides:{from:T,nonce:e,gasLimit:u?BigInt(u.toString()):void 0},feeOption:o})},rn=async(n,{assetValue:t,memo:y,recipient:o,feeOptionKey:p=U.Fast,data:u,from:T,maxFeePerGas:e,maxPriorityFeePerGas:l,gasPrice:i,...m},B,w=!0)=>{const f=t.getBaseValue("bigint"),M=t.chain,q=T||await B?.getAddress();if(!q)throw new R("toolbox_evm_no_from_address");if(!P(t)){const h=F(t,M);if(!h)throw new R("toolbox_evm_no_contract_address");return S(n,w,{signer:B,contractAddress:h,abi:z,funcName:"transfer",funcParams:[o,f],txOverrides:{from:q,maxFeePerGas:e,maxPriorityFeePerGas:l,gasPrice:i},feeOption:p})}const g={...m,from:q,to:o,value:f,data:u||j(N(y||""))};return un(n,g,p,B,w)},W=async(n,t=!0)=>{try{const{maxFeePerGas:y,maxPriorityFeePerGas:o,gasPrice:p}=await n.getFeeData();if(t){if(!(y&&o))throw new R("toolbox_evm_no_fee_data");return{[U.Average]:{maxFeePerGas:y,maxPriorityFeePerGas:o},[U.Fast]:{maxFeePerGas:y*15n/10n,maxPriorityFeePerGas:o*15n/10n},[U.Fastest]:{maxFeePerGas:y*2n,maxPriorityFeePerGas:o*2n}}}if(!p)throw new R("toolbox_evm_no_gas_price");return{[U.Average]:{gasPrice:p},[U.Fast]:{gasPrice:p*15n/10n},[U.Fastest]:{gasPrice:p*2n}}}catch(y){throw new Error(`Failed to estimate gas price: ${y.msg??y.toString()}`)}},Tn=(n,{signer:t,contractAddress:y,abi:o,funcName:p,funcParams:u=[],txOverrides:T})=>{if(!y)throw new R("toolbox_evm_no_contract_address");const e=k(y,o,n);return t?e.connect(t).getFunction(p).estimateGas(...u,T):e.getFunction(p).estimateGas(...u,T)},An=(n,{assetValue:t,recipient:y,memo:o,from:p,funcName:u,funcParams:T,txOverrides:e,signer:l})=>{const i=t.bigIntValue,m=P({...t})?null:F(t,t.chain);if(m&&u)return Tn(n,{contractAddress:m,abi:z,funcName:u,funcParams:T,txOverrides:e,signer:l});return n.estimateGas({from:p,to:y,value:i,data:o?j(N(o)):void 0})},un=async(n,t,y=U.Fast,o,p=!0)=>{if(!o)throw new R("toolbox_evm_no_signer");const{from:u,to:T,data:e,value:l,...i}=t;if(!T)throw new R("toolbox_evm_no_to_address");const m={...i,data:e||"0x",to:T,from:u,value:BigInt(l||0)};if(X(n))return a(n,m);const B=u||await o.getAddress(),w=t.nonce||await n.getTransactionCount(B),f=(await n.getNetwork()).chainId,M=Pn(m)||p,q=M&&!(m.maxFeePerGas&&m.maxPriorityFeePerGas)||!m.gasPrice?Object.entries((await W(n,p))[y]).reduce((h,[H,L])=>({...h,[H]:Y(BigInt(L))}),{}):{};let g;try{g=Y(m.gasLimit||await n.estimateGas(m)*11n/10n)}catch(h){throw new R("toolbox_evm_error_estimating_gas_limit",{error:h})}try{const h={...m,chainId:f,type:M?2:0,gasLimit:g,nonce:w,...q};try{return typeof(await o.sendTransaction(h)).hash}catch(H){const L=await o.signTransaction({...h,from:B});return typeof(await n.broadcastTransaction(L)).hash}}catch(h){throw new R("toolbox_evm_error_sending_transaction",{error:h})}},Pt=(n)=>Z(n),a=(n,{from:t,to:y,data:o,value:p})=>{if(!X(n))throw new R("toolbox_evm_provider_not_eip1193_compatible");return n.send("eth_sendTransaction",[{value:Y(BigInt(p||0)),from:t,to:y,data:o}])},jt=(n,t)=>{const y=F(n,t);if(y)return Z(y.toLowerCase());throw new R("toolbox_evm_invalid_gas_asset_address")},F=({chain:n,symbol:t,ticker:y},o)=>{try{if(n===o&&t===o&&y===o||n===D.BinanceSmartChain&&t==="BNB"&&y==="BNB"||n===D.Arbitrum&&t==="ETH"&&y==="ETH")return En[o];return Z(t.slice(y.length+1).replace(/^0X/,""))}catch(p){return null}},Vn=async(n,{assetValue:t,memo:y,recipient:o,feeOptionKey:p=U.Fast,data:u,from:T,maxFeePerGas:e,maxPriorityFeePerGas:l,gasPrice:i,...m},B)=>{const w=t.getBaseValue("bigint"),f=t.chain,M=T||await B?.getAddress();if(!M)throw new R("toolbox_evm_no_from_address");if(!P(t)){const g=F(t,f);if(!g)throw new R("toolbox_evm_no_contract_address");return I(n,{contractAddress:g,abi:z,funcName:"transfer",funcParams:[o,w],txOverrides:{from:M,maxFeePerGas:e,maxPriorityFeePerGas:l,gasPrice:i}})}return{...m,from:M,to:o,value:w,data:u||j(N(y||""))}},On=async(n,{assetAddress:t,spenderAddress:y,amount:o,from:p},u)=>{const T=[y,BigInt(o||K)];return await I(n,{contractAddress:t,abi:z,funcName:"approve",funcParams:T,signer:u,txOverrides:{from:p}})},b=({provider:n,signer:t,isEIP1559Compatible:y=!0})=>({approve:(o)=>Kn(n,o,t,y),approvedAmount:(o)=>pn(n,o),broadcastTransaction:n.broadcastTransaction,call:(o)=>S(n,y,{...o,signer:t}),createContract:(o,p,u)=>k(o,p,u||n),createContractTxObject:(o)=>I(n,o),EIP1193SendTransaction:(o)=>a(n,o),estimateCall:(o)=>Tn(n,{...o,signer:t}),estimateGasLimit:({assetValue:o,recipient:p,memo:u})=>An(n,{assetValue:o,recipient:p,memo:u,signer:t}),estimateGasPrices:()=>W(n,y),isApproved:(o)=>Nn(n,o),sendTransaction:(o,p)=>un(n,o,p,t,y),transfer:(o)=>rn(n,o,t,y),validateAddress:yn,createTransferTx:(o)=>Vn(n,o,t),createApprovalTx:(o)=>On(n,o,t),signMessage:vn(t)}),sn=({address:n})=>yn(n);var dn;((y)=>{y.Test="goerli";y.Main="homestead"})(dn||={});import{BaseDecimal as nt,Chain as r,ChainId as en,ChainToExplorerUrl as tt,FeeOption as E,RPCUrl as ot} from"@swapkit/helpers";var yt=()=>({chainId:en.ArbitrumHex,chainName:"Arbitrum One",nativeCurrency:{name:"Ethereum",symbol:r.Ethereum,decimals:nt.ETH},rpcUrls:[ot.Arbitrum],blockExplorerUrls:[tt[r.Arbitrum]]}),pt=async(n)=>{try{const{gasPrice:t}=await n.getFeeData();if(!t)throw new Error("No fee data available");return{[E.Average]:{gasPrice:t},[E.Fast]:{gasPrice:t},[E.Fastest]:{gasPrice:t}}}catch(t){throw new Error(`Failed to estimate gas price: ${t.msg??t.toString()}`)}},ln=({api:n,provider:t,signer:y,covalentApiKey:o})=>{const p=n||c({apiKey:o,chainId:en.Arbitrum}),u=b({provider:t,signer:y,isEIP1559Compatible:!1}),T=r.Arbitrum;return{...u,getNetworkParams:yt,estimateGasPrices:()=>pt(t),estimateTransactionFee:(e)=>$(e,E.Average,T,t,!1),getBalance:(e,l=!0,i)=>J({provider:i||t,api:p,address:e,chain:T,potentialScamFilter:l})}};import{BaseDecimal as Tt,Chain as A,ChainId as mn,ChainToExplorerUrl as ut} from"@swapkit/helpers";var et=()=>({chainId:mn.AvalancheHex,chainName:"Avalanche Network",nativeCurrency:{name:"Avalanche",symbol:A.Avalanche,decimals:Tt.AVAX},rpcUrls:["https://api.avax.network/ext/bc/C/rpc"],blockExplorerUrls:[ut[A.Avalanche]]}),Bn=({api:n,provider:t,signer:y,covalentApiKey:o})=>{const p=n||c({apiKey:o,chainId:mn.Avalanche}),u=b({provider:t,signer:y}),T=A.Avalanche;return{...u,getNetworkParams:et,estimateTransactionFee:(e,l)=>$(e,l,T,t),getBalance:(e,l=!0,i)=>J({provider:i||t,api:p,address:e,chain:T,potentialScamFilter:l})}};import{BaseDecimal as lt,Chain as Rn,ChainId as wn,ChainToExplorerUrl as mt} from"@swapkit/helpers";var it=()=>({chainId:wn.BinanceSmartChainHex,chainName:"Smart Chain",nativeCurrency:{name:"Binance Coin",symbol:"BNB",decimals:lt.BSC},rpcUrls:["https://bsc-dataseed.binance.org"],blockExplorerUrls:[mt[Rn.BinanceSmartChain]]}),hn=({api:n,provider:t,signer:y,covalentApiKey:o})=>{const p=n||c({apiKey:o,chainId:wn.BinanceSmartChain}),u=b({provider:t,signer:y,isEIP1559Compatible:!1}),T=Rn.BinanceSmartChain;return{...u,getNetworkParams:it,estimateTransactionFee:(e,l)=>$(e,l,T,t,!1),getBalance:(e,l=!0,i)=>J({provider:i||t,api:p,address:e,chain:T,potentialScamFilter:l})}};import{Chain as Bt} from"@swapkit/helpers";var Mn=({api:n,ethplorerApiKey:t,signer:y,provider:o})=>{const p=n||d(t),u=b({provider:o,signer:y}),T=Bt.Ethereum;return{...u,estimateTransactionFee:(e,l)=>$(e,l,T,o),getBalance:(e,l=!0,i)=>J({provider:i||o,api:p,address:e,chain:T,potentialScamFilter:l})}};import{Chain as x} from"@swapkit/helpers";import{BaseDecimal as Rt,Chain as V,ChainId as fn,ChainToExplorerUrl as wt,RPCUrl as ht} from"@swapkit/helpers";var Mt=()=>({chainId:fn.PolygonHex,chainName:"Polygon Mainnet",nativeCurrency:{name:"Polygon",symbol:V.Polygon,decimals:Rt.MATIC},rpcUrls:[ht.Polygon],blockExplorerUrls:[wt[V.Polygon]]}),Jn=({api:n,provider:t,signer:y,covalentApiKey:o})=>{const p=n||c({apiKey:o,chainId:fn.Polygon}),u=b({provider:t,signer:y}),T=V.Polygon;return{...u,getNetworkParams:Mt,estimateTransactionFee:(e,l)=>$(e,l,T,t),getBalance:(e,l=!0,i)=>J({provider:i||t,api:p,address:e,chain:T,potentialScamFilter:l})}};import{BaseDecimal as ft,Chain as v,ChainId as gn,ChainToExplorerUrl as Jt,FeeOption as O,RPCUrl as bt} from"@swapkit/helpers";var bn=[{inputs:[{internalType:"address",name:"_owner",type:"address"}],stateMutability:"nonpayable",type:"constructor"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"",type:"uint256"}],name:"DecimalsUpdated",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"",type:"uint256"}],name:"GasPriceUpdated",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"",type:"uint256"}],name:"L1BaseFeeUpdated",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"",type:"uint256"}],name:"OverheadUpdated",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"",type:"uint256"}],name:"ScalarUpdated",type:"event"},{inputs:[],name:"decimals",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"gasPrice",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes",name:"_data",type:"bytes"}],name:"getL1Fee",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes",name:"_data",type:"bytes"}],name:"getL1GasUsed",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"l1BaseFee",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"overhead",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"scalar",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"_decimals",type:"uint256"}],name:"setDecimals",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"_gasPrice",type:"uint256"}],name:"setGasPrice",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"_baseFee",type:"uint256"}],name:"setL1BaseFee",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"_overhead",type:"uint256"}],name:"setOverhead",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"_scalar",type:"uint256"}],name:"setScalar",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function"}];import{Contract as gt,Transaction as Ut} from"ethers";var qt="0x420000000000000000000000000000000000000f",s=(n)=>{return new gt(qt,bn,n)},Un=(n)=>{const t=s(n);if(t&&"l1BaseFee"in t)return t?.l1BaseFee();return},qn=async(n,{data:t,from:y,to:o,gasPrice:p,type:u,gasLimit:T,nonce:e})=>{if(!o)throw new Error("Missing to address");return Ut.from({data:t,to:o,gasPrice:p,type:u,gasLimit:T,nonce:e?e:y?await n.getTransactionCount(y):0}).serialized},cn=async(n,t)=>{const y=await s(n),o=await qn(n,t);if(y&&"getL1Fee"in y)return y.getL1Fee(o)},$n=async(n,t)=>{const y=await n.send("eth_gasPrice",[]),o=await n.estimateGas(t);return y.mul(o)},ct=async(n,t)=>{const y=await cn(n,t),o=await $n(n,t);return y.add(o)},$t=async(n,t)=>{const y=s(n),o=await qn(n,t);if(y&&"getL1GasUsed"in y)return y.getL1GasUsed(o)},Dt=()=>({chainId:gn.OptimismHex,chainName:"Optimism",nativeCurrency:{name:"Ethereum",symbol:v.Ethereum,decimals:ft.ETH},rpcUrls:[bt.Optimism],blockExplorerUrls:[Jt[v.Optimism]]}),Ht=async(n)=>{try{const{maxFeePerGas:t,maxPriorityFeePerGas:y,gasPrice:o}=await n.getFeeData(),p=await Un(n),u=o;if(!(t&&y))throw new Error("No fee data available");return{[O.Average]:{l1GasPrice:p,gasPrice:o,maxFeePerGas:t,maxPriorityFeePerGas:y},[O.Fast]:{l1GasPrice:(p||0n)*15n/10n,gasPrice:u*15n/10n,maxFeePerGas:t,maxPriorityFeePerGas:y*15n/10n},[O.Fastest]:{l1GasPrice:(p||0n)*2n,gasPrice:u*2n,maxFeePerGas:t,maxPriorityFeePerGas:y*2n}}}catch(t){throw new Error(`Failed to estimate gas price: ${t.msg??t.toString()}`)}},Dn=({api:n,provider:t,signer:y,covalentApiKey:o})=>{const p=n||c({apiKey:o,chainId:gn.Optimism});return{...b({provider:t,signer:y}),estimateTotalGasCost:(T)=>ct(t,T),estimateL1GasCost:(T)=>cn(t,T),estimateL2GasCost:(T)=>$n(t,T),getL1GasPrice:()=>Un(t),estimateL1Gas:(T)=>$t(t,T),getNetworkParams:Dt,estimateGasPrices:()=>Ht(t),getBalance:(T,e=!0,l)=>J({provider:l||t,api:p,address:T,chain:v.Optimism,potentialScamFilter:e})}};var Qo=(n)=>{switch(n){case x.Avalanche:return Bn;case x.Arbitrum:return ln;case x.Optimism:return Dn;case x.Polygon:return Jn;case x.BinanceSmartChain:return hn;case x.Ethereum:return Mn;default:throw new Error(`Chain ${n} is not supported`)}};export{Y as toHexString,Pt as toChecksumAddress,jn as isStateChangingCall,X as isBrowserProvider,Qo as getToolboxByChain,F as getTokenAddress,Xt as getProvider,Un as getL1GasPrice,jt as getChecksumAddressFromAsset,J as getBalance,sn as evmValidateAddress,d as ethplorerApi,$ as estimateTransactionFee,ct as estimateTotalGasCost,It as estimateMaxSendableAmount,$n as estimateL2GasCost,cn as estimateL1GasCost,$t as estimateL1Gas,W as estimateGasPrices,I as createContractTxObject,k as createContract,c as covalentApi,s as connectGasPriceOracle,Po as Transaction,_o as Signature,Dn as OPToolbox,K as MAX_APPROVAL,Jn as MATICToolbox,Eo as JsonRpcProvider,Fo as HDNodeWallet,dn as EthNetwork,Mn as ETHToolbox,a as EIP1193SendTransaction,ao as BrowserProvider,b as BaseEVMToolbox,hn as BSCToolbox,So as AbstractSigner,Bn as AVAXToolbox,ln as ARBToolbox};

//# debugId=BADFB0FB2CEFCFE364756E2164756E21
