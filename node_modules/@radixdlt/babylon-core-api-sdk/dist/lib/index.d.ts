import { ConfigurationParameters, LTSApi, MempoolApi, StateApi, StatusApi, StreamApi, TransactionApi } from "./generated";
import { LTS, Mempool, State, Status, Stream, Transaction } from "./subapis";
export * from "./subapis";
export * from "./generated";
interface CoreApiClientSettings {
    basePath: string;
    logicalNetworkName?: string;
    /** On Node.JS < 18, this will need to be provided by a library such as `node-fetch` */
    fetch?: any;
    /** DEPRECATED: Use `advanced.agent`. For use with node-fetch */
    httpAgent?: any;
    /** DEPRECATED: Use `advanced.agent`. For use with node-fetch */
    httpsAgent?: any;
    advanced?: ConfigurationParameters;
}
export declare class CoreApiClient {
    logicalNetworkName: string;
    LTS: LTS;
    lts: LTS;
    mempool: Mempool;
    state: State;
    status: Status;
    stream: Stream;
    transaction: Transaction;
    lowLevel: {
        lts: LTSApi;
        mempool: MempoolApi;
        state: StateApi;
        status: StatusApi;
        stream: StreamApi;
        transaction: TransactionApi;
    };
    private constructor();
    private static constructConfiguration;
    /**
     * Creates a CoreAPIClient.
     * Before returning, this method connects to the Core API to validate the connection and configured network name.
     */
    static initialize(settings: CoreApiClientSettings): Promise<CoreApiClient>;
    /**
     * Creates a CoreAPIClient, without checking that a connection can be established.
     * Requires a logical network name to be provided in the settings.
     */
    static initializeUnchecked(settings: CoreApiClientSettings & {
        logicalNetworkName: string;
    }): CoreApiClient;
}
