import { LTSApi, LtsCommittedTransactionOutcome, LtsStateAccountAllFungibleResourceBalancesRequest, LtsStateAccountAllFungibleResourceBalancesResponse, LtsStateAccountDepositBehaviourResponse, LtsStateAccountFungibleResourceBalanceRequest, LtsStateAccountFungibleResourceBalanceResponse, LtsStreamAccountTransactionOutcomesRequest, LtsStreamAccountTransactionOutcomesResponse, LtsStreamTransactionOutcomesRequest, LtsStreamTransactionOutcomesResponse, LtsTransactionConstructionResponse, LtsTransactionStatusRequest, LtsTransactionStatusResponse, LtsTransactionSubmitPriorityThresholdNotMetErrorDetails, LtsTransactionSubmitRejectedErrorDetails, LtsTransactionSubmitRequest, LtsTransactionSubmitResponse, ResponseError } from "../generated";
type LTSSubmitResult = {
    result: "Success";
    response: LtsTransactionSubmitResponse;
} | {
    result: "Error";
    message: string;
    error: ResponseError;
} | {
    result: "Rejected";
    details: LtsTransactionSubmitRejectedErrorDetails;
    error: ResponseError;
} | {
    result: "PriorityThresholdNotMet";
    details: LtsTransactionSubmitPriorityThresholdNotMetErrorDetails;
    error: ResponseError;
};
/**
 * Wraps the lower-level `LTSApi` - which can be accessed with `innerClient` for advanced use cases.
 */
export declare class LTS {
    innerClient: LTSApi;
    logicalNetworkName: string;
    constructor(innerClient: LTSApi, logicalNetworkName: string);
    /**
     * This method returns the current epoch, for use in transaction construction.
     *
     * Unless `acceptableSyncDelaySeconds` is set to `null`,
     * this method will throw an error if the node is not synced up within
     * `acceptableSyncDelaySeconds` (defaults to 120) of the current time.
     *
     * @returns metadata for transaction construction - such as the current epoch
     */
    getConstructionMetadata(parameters?: {
        acceptableSyncDelaySeconds: number | null;
    }): Promise<LtsTransactionConstructionResponse>;
    /**
     * Checks whether the given account is currently configured to accept the deposits of the given
     * resources - in other words, this method returns whether such `try_deposit()` call would be
     * successful, and why.
     *
     * @returns Details on the account's settings related to accepting deposits.
     */
    getAccountDepositBehaviour(targetAccountAddress: string, depositedResourceAddresses: Array<string>): Promise<LtsStateAccountDepositBehaviourResponse>;
    /**
     * Submits the transaction. Returns a result from the API.
     *
     * @param notarized_transaction_hex - the notarized transaction payload for submission, encoded as hex
     * @returns a union of possible results - match on the `result` field to determine which one:
     * - `Success` - the transaction was submitted successfully
     * - `Error` - the request errored for some reason
     * - `Rejected` - the transaction was rejected by the node for some reason
     * - `MempoolFull` - the transaction was rejected by the node because the mempool is full
     *    and the submitted transaction wasn't able to evict any existing mempool transactions
     */
    submitTransaction(request: Omit<LtsTransactionSubmitRequest, "network">): Promise<LTSSubmitResult>;
    getTransactionStatus(request: Omit<LtsTransactionStatusRequest, "network">): Promise<LtsTransactionStatusResponse>;
    getAccountFungibleResourceBalance(request: Omit<LtsStateAccountFungibleResourceBalanceRequest, "network">): Promise<LtsStateAccountFungibleResourceBalanceResponse>;
    getAccountAllFungibleResourceBalances(request: Omit<LtsStateAccountAllFungibleResourceBalancesRequest, "network">): Promise<LtsStateAccountAllFungibleResourceBalancesResponse>;
    getTransactionOutcome({ state_version, }: {
        state_version: number;
    }): Promise<LtsCommittedTransactionOutcome | undefined>;
    getTransactionOutcomes(request: Omit<LtsStreamTransactionOutcomesRequest, "network">): Promise<LtsStreamTransactionOutcomesResponse>;
    getAccountTransactionOutcomes(request: Omit<LtsStreamAccountTransactionOutcomesRequest, "network">): Promise<LtsStreamAccountTransactionOutcomesResponse>;
}
export {};
