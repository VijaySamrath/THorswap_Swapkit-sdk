/**
 * Radix Core API - Babylon (Bottlenose)
 * This API is exposed by the Babylon Radix node to give clients access to the Radix Engine, Mempool and State in the node.  The default configuration is intended for use by node-runners on a private network, and is not intended to be exposed publicly. Very heavy load may impact the node\'s function. The node exposes a configuration flag which allows disabling certain endpoints which may be problematic, but monitoring is advised. This configuration parameter is `api.core.flags.enable_unbounded_endpoints` / `RADIXDLT_CORE_API_FLAGS_ENABLE_UNBOUNDED_ENDPOINTS`.  This API exposes queries against the node\'s current state (see `/lts/state/` or `/state/`), and streams of transaction history (under `/lts/stream/` or `/stream`).  If you require queries against snapshots of historical ledger state, you may also wish to consider using the [Gateway API](https://docs-babylon.radixdlt.com/).  ## Integration and forward compatibility guarantees  Integrators (such as exchanges) are recommended to use the `/lts/` endpoints - they have been designed to be clear and simple for integrators wishing to create and monitor transactions involving fungible transfers to/from accounts.  All endpoints under `/lts/` have high guarantees of forward compatibility in future node versions. We may add new fields, but existing fields will not be changed. Assuming the integrating code uses a permissive JSON parser which ignores unknown fields, any additions will not affect existing code.  Other endpoints may be changed with new node versions carrying protocol-updates, although any breaking changes will be flagged clearly in the corresponding release notes.  All responses may have additional fields added, so clients are advised to use JSON parsers which ignore unknown fields on JSON objects.
 *
 * The version of the OpenAPI document: v1.2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { StateAccessControllerRequest, StateAccessControllerResponse, StateAccountRequest, StateAccountResponse, StateComponentRequest, StateComponentResponse, StateConsensusManagerRequest, StateConsensusManagerResponse, StateNonFungibleRequest, StateNonFungibleResponse, StatePackageRequest, StatePackageResponse, StateResourceRequest, StateResourceResponse, StateValidatorRequest, StateValidatorResponse } from '../models';
export interface StateAccessControllerPostRequest {
    stateAccessControllerRequest: StateAccessControllerRequest;
}
export interface StateAccountPostRequest {
    stateAccountRequest: StateAccountRequest;
}
export interface StateComponentPostRequest {
    stateComponentRequest: StateComponentRequest;
}
export interface StateConsensusManagerPostRequest {
    stateConsensusManagerRequest: StateConsensusManagerRequest;
}
export interface StateNonFungiblePostRequest {
    stateNonFungibleRequest: StateNonFungibleRequest;
}
export interface StatePackagePostRequest {
    statePackageRequest: StatePackageRequest;
}
export interface StateResourcePostRequest {
    stateResourceRequest: StateResourceRequest;
}
export interface StateValidatorPostRequest {
    stateValidatorRequest: StateValidatorRequest;
}
/**
 *
 */
export declare class StateApi extends runtime.BaseAPI {
    /**
     * Reads the access controller\'s substate/s from the top of the current ledger.
     * Get Access Controller Details
     */
    stateAccessControllerPostRaw(requestParameters: StateAccessControllerPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StateAccessControllerResponse>>;
    /**
     * Reads the access controller\'s substate/s from the top of the current ledger.
     * Get Access Controller Details
     */
    stateAccessControllerPost(requestParameters: StateAccessControllerPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StateAccessControllerResponse>;
    /**
     * Reads the account\'s substate/s from the top of the current ledger. Also returns all vaults under the account.
     * Get Account Details
     */
    stateAccountPostRaw(requestParameters: StateAccountPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StateAccountResponse>>;
    /**
     * Reads the account\'s substate/s from the top of the current ledger. Also returns all vaults under the account.
     * Get Account Details
     */
    stateAccountPost(requestParameters: StateAccountPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StateAccountResponse>;
    /**
     * Reads the component\'s substate/s from the top of the current ledger. Also recursively extracts vault balance totals from the component\'s entity subtree.
     * Get Component Details
     */
    stateComponentPostRaw(requestParameters: StateComponentPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StateComponentResponse>>;
    /**
     * Reads the component\'s substate/s from the top of the current ledger. Also recursively extracts vault balance totals from the component\'s entity subtree.
     * Get Component Details
     */
    stateComponentPost(requestParameters: StateComponentPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StateComponentResponse>;
    /**
     * Reads the consensus manager\'s substate/s from the top of the current ledger.
     * Get Consensus Manager Details
     */
    stateConsensusManagerPostRaw(requestParameters: StateConsensusManagerPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StateConsensusManagerResponse>>;
    /**
     * Reads the consensus manager\'s substate/s from the top of the current ledger.
     * Get Consensus Manager Details
     */
    stateConsensusManagerPost(requestParameters: StateConsensusManagerPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StateConsensusManagerResponse>;
    /**
     * Reads the data associated with a single Non-Fungible Unit under a Non-Fungible Resource.
     * Get Non-Fungible Details
     */
    stateNonFungiblePostRaw(requestParameters: StateNonFungiblePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StateNonFungibleResponse>>;
    /**
     * Reads the data associated with a single Non-Fungible Unit under a Non-Fungible Resource.
     * Get Non-Fungible Details
     */
    stateNonFungiblePost(requestParameters: StateNonFungiblePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StateNonFungibleResponse>;
    /**
     * Reads the package\'s substate/s from the top of the current ledger.
     * Get Package Details
     */
    statePackagePostRaw(requestParameters: StatePackagePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StatePackageResponse>>;
    /**
     * Reads the package\'s substate/s from the top of the current ledger.
     * Get Package Details
     */
    statePackagePost(requestParameters: StatePackagePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StatePackageResponse>;
    /**
     * Reads the resource manager\'s substate/s from the top of the current ledger.
     * Get Resource Details
     */
    stateResourcePostRaw(requestParameters: StateResourcePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StateResourceResponse>>;
    /**
     * Reads the resource manager\'s substate/s from the top of the current ledger.
     * Get Resource Details
     */
    stateResourcePost(requestParameters: StateResourcePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StateResourceResponse>;
    /**
     * Reads the validator\'s substate/s from the top of the current ledger.
     * Get Validator Details
     */
    stateValidatorPostRaw(requestParameters: StateValidatorPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StateValidatorResponse>>;
    /**
     * Reads the validator\'s substate/s from the top of the current ledger.
     * Get Validator Details
     */
    stateValidatorPost(requestParameters: StateValidatorPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StateValidatorResponse>;
}
