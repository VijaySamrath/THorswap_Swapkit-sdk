/**
 * Radix Core API - Babylon (Bottlenose)
 * This API is exposed by the Babylon Radix node to give clients access to the Radix Engine, Mempool and State in the node.  The default configuration is intended for use by node-runners on a private network, and is not intended to be exposed publicly. Very heavy load may impact the node\'s function. The node exposes a configuration flag which allows disabling certain endpoints which may be problematic, but monitoring is advised. This configuration parameter is `api.core.flags.enable_unbounded_endpoints` / `RADIXDLT_CORE_API_FLAGS_ENABLE_UNBOUNDED_ENDPOINTS`.  This API exposes queries against the node\'s current state (see `/lts/state/` or `/state/`), and streams of transaction history (under `/lts/stream/` or `/stream`).  If you require queries against snapshots of historical ledger state, you may also wish to consider using the [Gateway API](https://docs-babylon.radixdlt.com/).  ## Integration and forward compatibility guarantees  Integrators (such as exchanges) are recommended to use the `/lts/` endpoints - they have been designed to be clear and simple for integrators wishing to create and monitor transactions involving fungible transfers to/from accounts.  All endpoints under `/lts/` have high guarantees of forward compatibility in future node versions. We may add new fields, but existing fields will not be changed. Assuming the integrating code uses a permissive JSON parser which ignores unknown fields, any additions will not affect existing code.  Other endpoints may be changed with new node versions carrying protocol-updates, although any breaking changes will be flagged clearly in the corresponding release notes.  All responses may have additional fields added, so clients are advised to use JSON parsers which ignore unknown fields on JSON objects.
 *
 * The version of the OpenAPI document: v1.2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { TransactionCallPreviewRequest, TransactionCallPreviewResponse, TransactionParseRequest, TransactionParseResponse, TransactionPreviewRequest, TransactionPreviewResponse, TransactionReceiptRequest, TransactionReceiptResponse, TransactionStatusRequest, TransactionStatusResponse, TransactionSubmitRequest, TransactionSubmitResponse } from '../models';
export interface TransactionCallPreviewPostRequest {
    transactionCallPreviewRequest: TransactionCallPreviewRequest;
}
export interface TransactionParsePostRequest {
    transactionParseRequest: TransactionParseRequest;
}
export interface TransactionPreviewPostRequest {
    transactionPreviewRequest: TransactionPreviewRequest;
}
export interface TransactionReceiptPostRequest {
    transactionReceiptRequest: TransactionReceiptRequest;
}
export interface TransactionStatusPostRequest {
    transactionStatusRequest: TransactionStatusRequest;
}
export interface TransactionSubmitPostRequest {
    transactionSubmitRequest: TransactionSubmitRequest;
}
/**
 *
 */
export declare class TransactionApi extends runtime.BaseAPI {
    /**
     * Preview a scrypto function or method call against the latest network state. Returns the result of the scrypto function or method call.
     * Scrypto Call Preview
     */
    transactionCallPreviewPostRaw(requestParameters: TransactionCallPreviewPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionCallPreviewResponse>>;
    /**
     * Preview a scrypto function or method call against the latest network state. Returns the result of the scrypto function or method call.
     * Scrypto Call Preview
     */
    transactionCallPreviewPost(requestParameters: TransactionCallPreviewPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionCallPreviewResponse>;
    /**
     * Extracts the contents and hashes of various types of transaction payloads, or sub-payloads.
     * Parse Transaction Payload
     */
    transactionParsePostRaw(requestParameters: TransactionParsePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionParseResponse>>;
    /**
     * Extracts the contents and hashes of various types of transaction payloads, or sub-payloads.
     * Parse Transaction Payload
     */
    transactionParsePost(requestParameters: TransactionParsePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionParseResponse>;
    /**
     * Preview a transaction against the latest network state, and returns the preview receipt.
     * Transaction Preview
     */
    transactionPreviewPostRaw(requestParameters: TransactionPreviewPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionPreviewResponse>>;
    /**
     * Preview a transaction against the latest network state, and returns the preview receipt.
     * Transaction Preview
     */
    transactionPreviewPost(requestParameters: TransactionPreviewPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionPreviewResponse>;
    /**
     * Gets the transaction receipt for a committed transaction.
     * Get Transaction Receipt
     */
    transactionReceiptPostRaw(requestParameters: TransactionReceiptPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionReceiptResponse>>;
    /**
     * Gets the transaction receipt for a committed transaction.
     * Get Transaction Receipt
     */
    transactionReceiptPost(requestParameters: TransactionReceiptPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionReceiptResponse>;
    /**
     * Shares the node\'s knowledge of any payloads associated with the given intent hash. Generally there will be a single payload for a given intent, but it\'s theoretically possible there may be multiple. This knowledge is summarised into a status for the intent. This summarised status in the response is likely sufficient for most clients.
     * Get Transaction Status
     */
    transactionStatusPostRaw(requestParameters: TransactionStatusPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionStatusResponse>>;
    /**
     * Shares the node\'s knowledge of any payloads associated with the given intent hash. Generally there will be a single payload for a given intent, but it\'s theoretically possible there may be multiple. This knowledge is summarised into a status for the intent. This summarised status in the response is likely sufficient for most clients.
     * Get Transaction Status
     */
    transactionStatusPost(requestParameters: TransactionStatusPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionStatusResponse>;
    /**
     * Submits a notarized transaction to the network. Returns whether the transaction submission was already included in the node\'s mempool.
     * Transaction Submit
     */
    transactionSubmitPostRaw(requestParameters: TransactionSubmitPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionSubmitResponse>>;
    /**
     * Submits a notarized transaction to the network. Returns whether the transaction submission was already included in the node\'s mempool.
     * Transaction Submit
     */
    transactionSubmitPost(requestParameters: TransactionSubmitPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionSubmitResponse>;
}
